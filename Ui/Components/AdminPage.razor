@using ST10019838_DamianDare_PROG7311_POE.Models
@using ST10019838_DamianDare_PROG7311_POE.Ui.Components
@using ST10019838_DamianDare_PROG7311_POE.Ui.Forms
@using static ST10019838_DamianDare_PROG7311_POE.Endpoints.FarmersEndpoints;
@using static ST10019838_DamianDare_PROG7311_POE.Utils.Utils;

@using System.Diagnostics;
@inject IDialogService DialogService
@inject HttpClient http
@inject AppDbContext db




<MudStack Spacing="2" Style="width: 100%;">
    <MudStack Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="d-flex flex-sm-row">
        <MudText Typo="Typo.h5">Farmers & Products</MudText>

        <MudStack Row AlignItems="AlignItems.Center" Spacing="6" Class="d-flex flex-row">
            <MudButton StartIcon="@filterIcon"
                       Variant="(isFilterOpen ? Variant.Filled : Variant.Outlined )"
                       OnClick="OpenFilter" DisableElevation>
                Filter Products
            </MudButton>
            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.PostAdd"
                       OnClick="OpenFarmerCreationForm">
                Add Farmer
            </MudButton>
        </MudStack>
    </MudStack>


    <MudCollapse Expanded="isFilterOpen" Style="width: 100%;">
        <MudStack AlignItems="AlignItems.Center" Class="mb-2 d-flex flex-md-row" Style="width: 100%;">
            <MudSelect @bind-Value="fieldToFilter" Label="Field" Variant="Variant.Outlined"
                       AnchorOrigin="Origin.BottomCenter" Style="width: 100%;">
                <MudSelectItem T="FilterableField" Value="FilterableField.PRODUCT_TYPE">Product Type</MudSelectItem>
                <MudSelectItem T="FilterableField" Value="FilterableField.PRODUCTION_DATE">Production Date</MudSelectItem>
            </MudSelect>

            @switch (fieldToFilter)
            {
                case FilterableField.PRODUCT_TYPE:
                    <MudTextField @bind-Value="FilterValue" Placeholder="Value" Variant="Variant.Outlined"
                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Abc"
                                  Clearable OnClearButtonClick="FilterFarmerProducts"
                                  OnKeyUp="FilterFarmerProducts" Immediate FullWidth />

                    break;
                case FilterableField.PRODUCTION_DATE:
                    <MudDatePicker Label="Start Date" Date="StartDate" Variant="Variant.Outlined"
                                   Clearable DateChanged="((d) => DateChanged(d as DateTime?))" Style="width: 100%"
                                   AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter" />
                    <MudDatePicker Label="End Date" Date="EndDate" Variant="Variant.Outlined" MinDate="StartDate"
                                   Clearable DateChanged="((d) => DateChanged(d as DateTime?, true))"
                                   AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter" />
                    break;
            }

        </MudStack>
    </MudCollapse>

    <MudDivider Style="width: 80%;" Class="mx-auto mb-2" />




    <MudTreeView T="string" ExpandOnClick Hover MaxHeight="500px" Width="100%" Class="overflow-y-auto">
        @if (isLoading)
        {
            <MudStack Row Justify="Justify.Center">
                <MudProgressCircular Color="Color.Default" Indeterminate="true" Class="mx-auto" />
            </MudStack>
        }
        else if (!Farmers.Any())
        {
            <MudText Typo="Typo.h6">No farmers have been added yet</MudText>
        }
        else if (!FarmersToDisplay.Any())
        {
            <MudText Typo="Typo.h6">The farmers and their products you searched for do not exist</MudText>
        }
        else
        {
            @foreach (var farmer in FarmersToDisplay)
            {
                <MudTreeViewItem Value="@($"Farmer {farmer.Information.User_id} | {farmer.Information.Email} | {ShortenString(farmer.Information.Name ?? "")} ")" Class="mb-7">

                @if (farmer.Products.Any())
                {
                    @foreach(var product in farmer.Products)
                    {
                        <ProductTreeViewItem product="@product" />
                    }
                }
                else
                {
                    <MudText Typo="Typo.h6">No products have been added to this farmer yet</MudText>
                }
                </MudTreeViewItem>
            }
        }

    </MudTreeView>

</MudStack>





@code {
    bool isLoading = false;

    bool isFilterOpen = false;
    string filterIcon = Icons.Material.Filled.FilterAlt;

    public string? FilterValue = null;
    DateTime? StartDate { get; set; }
    DateTime? EndDate { get; set; }

    List<Farmer>? Farmers = new List<Farmer>();

    List<Farmer> FarmersToDisplay = new List<Farmer>();
    FilterableField fieldToFilter;


    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        await FetchData();

        isLoading = false;
    }

    async Task FetchData()
    {
        Farmers = await GetAllFarmers(db, http);
        FarmersToDisplay = Farmers;
    }



    void OpenFilter()
    {
        isFilterOpen = !isFilterOpen;
        filterIcon = isFilterOpen ? Icons.Material.Filled.FilterAltOff : Icons.Material.Filled.FilterAlt;
    }


    void DateChanged(DateTime? newDate, bool endDateChanged = false)
    {
        if (endDateChanged)
        {
            EndDate = newDate;
        }
        else
        {
            EndDate = null;
            StartDate = newDate;
        }

        FilterFarmerProducts();
    }



    private void FilterFarmerProducts()
    {
        if (fieldToFilter == FilterableField.PRODUCT_TYPE && (FilterValue is null || FilterValue.Equals(string.Empty))
            || fieldToFilter == FilterableField.PRODUCTION_DATE && (!StartDate.HasValue && !EndDate.HasValue)
        )
        {
            FarmersToDisplay = Farmers;
            return;
        }


        FarmersToDisplay = fieldToFilter switch
        {
            FilterableField.PRODUCT_TYPE => FilterFarmerProductsByType(),


            FilterableField.PRODUCTION_DATE => FilterFarmerProductsByDate(),


            _ => FilterFarmerProductsByType()
        };

        StateHasChanged();
    }

    private async void OpenFarmerCreationForm()
    {
        var dialog = DialogService.Show<FarmerForm>("Farmer Creation");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await FetchData();
            StateHasChanged();
        }

    }


    private List<Farmer> FilterFarmerProductsByType()
    {
        List<Farmer> farmersToDisplay = new List<Farmer>();

        foreach (Farmer farmer in Farmers)
        {
            if (!farmer.Products.Any()) continue;

            Farmer newFarmer = farmer.DeepCopyWithEmptyProducts();

            foreach(Product product in farmer?.Products)
            {
                if (product.Type?.ToLower().Contains(FilterValue.ToLower()) ?? false)
                    newFarmer.Products.Add(product);
            }

            if (newFarmer.Products.Any()) farmersToDisplay.Add(newFarmer);
        }

        return farmersToDisplay;

        //  Farmers.Where(f => f.Products?.Where(p =>
        // p.Type?.ToLower().Contains(FilterValue.ToLower()) ?? false
        // ).ToList() ?? false
        // ).ToList();
    }

    private List<Farmer> FilterFarmerProductsByDate()
    {
        List<Farmer> farmersToDisplay = new List<Farmer>();

        foreach (Farmer farmer in Farmers)
        {
            if (!farmer.Products.Any()) continue;

            Farmer newFarmer = farmer.DeepCopyWithEmptyProducts();

            foreach (Product product in farmer?.Products)
            {
                if (StartDate.HasValue && EndDate.HasValue)
                {
                    if (product.ProductionDate != null &&
                                        DateTime.Compare(product.ProductionDate.Value.Date, StartDate.Value.Date) >= 0 &&
                                        DateTime.Compare(product.ProductionDate.Value.Date, EndDate.Value.Date) <= 0)
                        newFarmer.Products.Add(product);
                }
                else if (StartDate.HasValue)
                {
                    if (product.ProductionDate != null &&
                                        DateTime.Compare(product.ProductionDate.Value.Date, StartDate.Value.Date) >= 0)
                        newFarmer.Products.Add(product);
                }
                else
                {
                   if(product.ProductionDate != null &&
                                         DateTime.Compare(product.ProductionDate.Value.Date, EndDate.Value.Date) <= 0)
                        newFarmer.Products.Add(product);
                }
            }

            if (newFarmer.Products.Any()) farmersToDisplay.Add(newFarmer);
        }

        return farmersToDisplay;

        //  Farmers.Where(f => f.Products?.Where(p =>
        // p.Type?.ToLower().Contains(FilterValue.ToLower()) ?? false
        // ).ToList() ?? false
        // ).ToList();
    }
}

