@using ST10019838_DamianDare_PROG7311_POE.Models
@using ST10019838_DamianDare_PROG7311_POE.Ui.Components
@using ST10019838_DamianDare_PROG7311_POE.Ui.Forms
@using static ST10019838_DamianDare_PROG7311_POE.Endpoints.ProductsEndpoints;
@using static ST10019838_DamianDare_PROG7311_POE.Utils.Utils;
@inject IDialogService DialogService
@inject HttpClient http
@inject AppDbContext db

<!-- @if (/*userIsAdmin*/)
{

} -->
<!--<div class="overflow-y-scroll">
@if (products.Count == 0)
{
        <MudText>No products have been added yet</MudText>
}
else
{
@foreach (Product product in products)
{
            <MudText>@product.Name</MudText>
};
}
</div>

GroupClassFunc="GroupClassFunc"
-->
@if (/*farmers.Count == 0*/ false)
{
    <MudText>No products have been added yet</MudText>
}
else
{   
    <MudTreeView T="string" ExpandOnClick Hover >
        <MudStack Spacing="4">
            @foreach (var product in Products)
            {
                <MudTreeViewItem Value="@($"Product {product.Id}: {ShortenString(product.Name)} ")">
                    <MudStack Style="width: 100%;" Justify="Justify.Center" Class="flex-sm-row flex-wrap">
                        <MudTreeViewItem Value="@($"Id: {product.Id}")" />
                        <MudTreeViewItem Value="@($"Name: {product.Name}")" />
                        <MudTreeViewItem Value="@($"Category: {product.Category}")" />
                        <MudTreeViewItem Value="@($"Description: {product.Description}")" />
                        <MudTreeViewItem Value="@($"Quantity: {product.Quantity}")" />
                        <MudTreeViewItem Value="@($"Price: {product.Price}")" />
                    </MudStack>
                </MudTreeViewItem>
            }
        </MudStack>
    </MudTreeView>

}





@code {
    MudDataGrid<Product> dataGrid;
    bool _customizeGroupTemplate;
    static bool _customizeGroupBy;
    List<Product> Products = new List<Product>();

    Func<FarmerProduct, object> _groupBy = x =>
    {
        // if (_customizeGroupBy)
        //     return _nonmetals.Contains(x.Sign) ? "Nonmetal" : "Metal";

        return x.Farmer.FirstName;
    };



    protected override async Task OnInitializedAsync()
    {
        // Products = await GetAllProducts(db);

        Products = new List<Product>()
        {
            new Product(){Name = "beef", Price = 1800},
            new Product(){Id = 1, Name = "corn sdfjlaksdjf lasjdf lasjdfl;asjdf lad;sj "}
        };
    }

    // private string GroupClassFunc(GroupDefinition<Product> item)
    // {
    //     return item.Grouping.Key?.ToString() == "Nonmetal" || item.Grouping.Key?.ToString() == "Other"
    //             ? "mud-theme-warning"
    //             : string.Empty;
    // }

    // protected override async Task OnInitializedAsync()
    // {
    //     Elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
    // }

    void ExpandAllGroups()
    {
        dataGrid?.ExpandAllGroups();
    }

    void CollapseAllGroups()
    {
        dataGrid?.CollapseAllGroups();
    }

    void CustomizeByGroupChanged(bool isChecked)
    {
        _customizeGroupBy = isChecked;
        dataGrid.GroupItems();
    }

   


    // List<Product> products = new List<Product>();
    // List<Admin> users = new List<Admin>();

    // List<FarmerProduct> Farmers = new List<FarmerProduct>();


    private void OpenProductCreationForm()
    {
        DialogService.Show<ProductForm>("Product Creation");
    }

}
