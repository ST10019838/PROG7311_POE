@using ST10019838_DamianDare_PROG7311_POE.Models
@using ST10019838_DamianDare_PROG7311_POE.Ui.Components
@using ST10019838_DamianDare_PROG7311_POE.Ui.Forms
@using static ST10019838_DamianDare_PROG7311_POE.Endpoints.ProductsEndpoints;
@using static ST10019838_DamianDare_PROG7311_POE.Utils.Utils;

@using System.Diagnostics;

@inject IDialogService DialogService
@inject HttpClient http
@inject AppDbContext db



<MudStack Spacing="2">
    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
        <MudText Typo="Typo.h5">Products</MudText>

        <MudStack Row AlignItems="AlignItems.Center" Spacing="6">
            <MudButton StartIcon="@Icons.Material.Filled.FilterAlt"
                       Variant="( isFilterOpen ? Variant.Filled : Variant.Outlined )"
                       OnClick="OpenFilter" DisableElevation>
                Filter
            </MudButton>
            <MudButton Variant="Variant.Outlined">Add Product</MudButton>
        </MudStack>
     </MudStack>


    <MudCollapse Expanded="isFilterOpen">
        <MudStack Row AlignItems="AlignItems.Center" Class="mb-2">
            <MudSelect @bind-Value="fieldToFilter" Label="Field" Variant="Variant.Outlined"
                AnchorOrigin="Origin.BottomCenter" Style="height: 100%;">
                <MudSelectItem T="FilterableField" Value="FilterableField.PRODUCT_TYPE">Product Type</MudSelectItem>
                <MudSelectItem T="FilterableField" Value="FilterableField.PRODUCTION_DATE">Production Date</MudSelectItem>
            </MudSelect>

            @switch(fieldToFilter)
            {
                case FilterableField.PRODUCT_TYPE:
                    <MudTextField @bind-Value="Search" Placeholder="Value" Variant="Variant.Outlined"
                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Abc"
                                  Clearable OnClearButtonClick="FilterProducts"
                                  OnKeyUp="FilterProducts" Immediate />

                    break;
                case FilterableField.PRODUCTION_DATE:
                    <MudDatePicker Label="Start Date" Date="StartDate" Variant="Variant.Outlined"
                                   Clearable DateChanged="((d) => DateChanged(d as DateTime?))" />
                    <MudDatePicker Label="End Date" Date="EndDate" Variant="Variant.Outlined" MinDate="StartDate"
                                   Clearable DateChanged="((d) => DateChanged(d as DateTime?, true))" />
                    break;
            }
            
        </MudStack>
    </MudCollapse>

    <MudDivider Style="width: 80%;" Class="mx-auto mb-2" />

    <MudTreeView T="string" ExpandOnClick Hover>
        <MudStack Spacing="4" Style="max-height: 600px; overflow-y: auto;">
            @if (!Products.Any())
            {
                <MudText Typo="Typo.h6">No products have been added yet</MudText>
            }
            else if (!ProductsToDisplay.Any())
            {
                <MudText Typo="Typo.h6">The product you searched for doesn't exist</MudText>
            }
            else
            {
                @foreach (var product in ProductsToDisplay)
                {
                    <MudTreeViewItem Value="@($"Product {product.Id}: {ShortenString(product.Name)} ")">
                        <MudStack Style="width: 100%;" Justify="Justify.Center" Class="flex-sm-row flex-wrap">
                            <MudTreeViewItem Value="@($"Id: {product.Id}")" />
                            <MudTreeViewItem Value="@($"Name: {product.Name}")" />
                            <MudTreeViewItem Value="@($"Category: {product.Category}")" />
                            <MudTreeViewItem Value="@($"Description: {product.Description}")" />
                            <MudTreeViewItem Value="@($"Quantity: {product.Quantity}")" />
                            <MudTreeViewItem Value="@($"Price: {product.Price}")" />
                        </MudStack>
                    </MudTreeViewItem>
                }
            }
        </MudStack>
    </MudTreeView>

</MudStack>




@code {
    DateTime? StartDate { get; set; }
    DateTime? EndDate { get; set; }


    void DateChanged(DateTime? newDate, bool endDateChanged = false)
    {
        if (endDateChanged)
        {
            EndDate = newDate;
        }
        else
        {
            EndDate = null;
            StartDate = newDate;
        }

        FilterProducts();
    }

    bool isFilterOpen = false;

    void OpenFilter()
    {
        isFilterOpen = !isFilterOpen;
    }

    FilterableField fieldToFilter;


    List<Product> Products = new List<Product>();
    public string? Search = null;
    List<Product> ProductsToDisplay = new List<Product>();


    private void FilterProducts()
    {
        if (fieldToFilter == FilterableField.PRODUCT_TYPE && (Search is null || Search.Equals(string.Empty))  
            || fieldToFilter == FilterableField.PRODUCTION_DATE && (!StartDate.HasValue && !EndDate.HasValue)
        )
        {
            ProductsToDisplay = Products;
            return;
        }


        ProductsToDisplay = fieldToFilter switch
        {
            FilterableField.PRODUCT_TYPE =>
            Products.Where(p => p.Type?.ToLower().Contains(Search.ToLower()) ?? false).ToList(),

            FilterableField.PRODUCTION_DATE =>
                StartDate.HasValue && EndDate.HasValue ?
                    Products.Where(p => p.ProductionDate != null && 
                        DateTime.Compare(p.ProductionDate.Value.Date, StartDate.Value.Date) >= 0 &&
                        DateTime.Compare(p.ProductionDate.Value.Date, EndDate.Value.Date) <= 0).ToList()
                : StartDate.HasValue ?
                    Products.Where(p => p.ProductionDate != null &&
                        DateTime.Compare(p.ProductionDate.Value.Date, StartDate.Value.Date) >= 0).ToList()

                : Products.Where(p => p.ProductionDate != null && 
                        DateTime.Compare(p.ProductionDate.Value.Date, EndDate.Value.Date) <= 0).ToList(),

            _ => Products.Where(p => p.Name.ToLower().Contains(Search.ToLower())).ToList()
        };

        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        // Products = await GetAllProducts(db);

        Products = new List<Product>()
        {
            new Product(){Name = "beef", Price = 1800, Category = "FOOD", ProductionDate = DateTime.Now, Type="YOLO"},
            new Product(){Id = 1, Name = "corn sdfjlaksdjf lasjdf lasjdfl;asjdf lad;sj ", ProductionDate = DateTime.Now}
        };

        ProductsToDisplay = Products;
    }


    // protected override async Task OnInitializedAsync()
    // {
    //     Elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
    // }

   


    // List<Product> products = new List<Product>();
    // List<Admin> users = new List<Admin>();

    // List<FarmerProduct> Farmers = new List<FarmerProduct>();


    private void OpenProductCreationForm()
    {
        DialogService.Show<ProductForm>("Product Creation");
    }
}